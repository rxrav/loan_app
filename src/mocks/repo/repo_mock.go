// Code generated by MockGen. DO NOT EDIT.
// Source: .\src\repo\repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/rxrav/loan_app/src/domain"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(user domain.User) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockUserRepo) GetUser(username string) *domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*domain.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepoMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), username)
}

// MockLoanRepo is a mock of LoanRepo interface.
type MockLoanRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepoMockRecorder
}

// MockLoanRepoMockRecorder is the mock recorder for MockLoanRepo.
type MockLoanRepoMockRecorder struct {
	mock *MockLoanRepo
}

// NewMockLoanRepo creates a new mock instance.
func NewMockLoanRepo(ctrl *gomock.Controller) *MockLoanRepo {
	mock := &MockLoanRepo{ctrl: ctrl}
	mock.recorder = &MockLoanRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepo) EXPECT() *MockLoanRepoMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanRepo) CreateLoan(loan domain.Loan) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", loan)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanRepoMockRecorder) CreateLoan(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanRepo)(nil).CreateLoan), loan)
}

// GetAllLoans mocks base method.
func (m *MockLoanRepo) GetAllLoans(username string) []domain.Loan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLoans", username)
	ret0, _ := ret[0].([]domain.Loan)
	return ret0
}

// GetAllLoans indicates an expected call of GetAllLoans.
func (mr *MockLoanRepoMockRecorder) GetAllLoans(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLoans", reflect.TypeOf((*MockLoanRepo)(nil).GetAllLoans), username)
}

// GetLoan mocks base method.
func (m *MockLoanRepo) GetLoan(loanID uuid.UUID) *domain.Loan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoan", loanID)
	ret0, _ := ret[0].(*domain.Loan)
	return ret0
}

// GetLoan indicates an expected call of GetLoan.
func (mr *MockLoanRepoMockRecorder) GetLoan(loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoan", reflect.TypeOf((*MockLoanRepo)(nil).GetLoan), loanID)
}
